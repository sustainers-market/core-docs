asyncapi: "2.0.0-rc1"
id: "core:sustainers:net"
info:
  title: Core | Sustainer's Market
  version: "1.0.0"
  description: |
    The Core service provides authentication, accounts, event sourcing, and payments functionality for the market. 

    There are 4 domains in this service 

    **issuer** - An `issuer` has roles, and therefore can acquire `auth-token`'s' to issue any number of commands on the Market.

    **auth-token** - An `auth-token` is used as authorization for commands on an `issuer`'s behalf, confined to specified scopes.'

    **account** - An `account` has name, phone number, and payment information stored so that services can request access to them by sending a `challenge`.

    **challenge** - A `challenge` is used by a service to request an account holder's permissions.

    # Check out its awesome features:
    ## Check out its awesome features:
    ### Check out its awesome features:
    ### Check out its awesome features:

    * Turn a _specific_ *streetlight* `on/off` ðŸŒƒ
    * Dim a specific streetlight ðŸ˜Ž
    * Receive real-time information about environmental lighting conditions ðŸ“ˆ
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: core.sustainers.market
    protocol: https
    description: Production server
    security:
      - apiKey: []
      - supportedOauthFlows:
          - streetlights:on
          - streetlights:off
          - streetlights:dim

defaultContentType: application/json

tags:
  - name: auth-token

channels:
  create.auth-token:
    publish:
      operationId: create.auth-token
      summary: Create auth token.
      description: This command creates an auth token.
      tags:
        - name: auth-token
      message:
        $ref: "#/components/messages/create-auth-token"

components:
  messages:
    create-auth-token:
      name: create-auth-token-command
      title: Create auth token command
      summary: Do something quite good.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/create-auth-token-payload"

  schemas:
    create-auth-token-payload:
      type: object
      properties:
        percentage:
          type: integer
          description: Percentage to which the light should be dimmed to.
          minimum: 0
          maximum: 100
        swag:
          type: object
          description: Light intensity measured in lumens.
          properties:
            umph:
              type: integer
        lumens:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          $ref: "#/components/schemas/sentAt"
        some:
          type: string
          enum:
            - on
            - off
    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.

  securitySchemes:
    apiKey:
      type: apiKey
      in: password
      description: Provide your API key as the password field of the request's [Basic Authorization](https://en.wikipedia.org/wiki/Basic_access_authentication) header.
    supportedOauthFlows:
      type: oauth2
      description: Flows to support OAuth 2.0
      flows:
        clientCredentials:
          tokenUrl: "https://authserver.example/token"
          scopes:
            "streetlights:on": Ability to switch lights on
            "streetlights:off": Ability to switch lights off
            "streetlights:dim": Ability to dim the lights
        authorizationCode:
          authorizationUrl: "https://authserver.example/auth"
          tokenUrl: "https://authserver.example/token"
          refreshUrl: "https://authserver.example/refresh"
          scopes:
            "streetlights:on": Ability to switch lights on
            "streetlights:off": Ability to switch lights off
            "streetlights:dim": Ability to dim the lights
