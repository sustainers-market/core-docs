asyncapi: 2.0.0-rc2

info:
  title: Core | Sustainer's Market Network
  version: "1.0.0"
  description: |
    * [Overview](#introduction) - what is the Core service and how do you use it?
    * [Servers](#servers) - where is the Core service accessed?
    * [Operations](#operations) - what does the Core service let you do?

    ## Overview 
    The Core service provides identity, transaction, and accounting functionality for the [Sustainer's Market](https://sustainers.market).

    To interact with the network, issue Commands to the endpoints described in the [operations](#operations) section, and listen to events published to a webhook.

    The service is composed of the `role`, `principle`, `auth-token`, `person-account`, `service-account`, `service`, `webhook`, and `challenge` domains.

    ### | `role`
    A `role` is a grouping of scopes. It lets you create meaningful labels that characterize what a group of access rights mean.

    For example, an Admin `role` can be characterized by scopes that give access to all resources. 

    #### Schema
    ```javascript
    {
      root: "some-uuid",
      name: "Some Role",
      scopes: [
        { 
          domain: "service", 
          priviledges: ["create"]
        },
        { 
          domain: "challenge", 
          priviledges: ["verify"],
          root: "<some-challenge-root>"
        }
      ]
    }
    ```

    The `role` in the example above has access to services that allow the `service:create` or `challenge:verify` scopes. 

    #### Commands 
    [create](#operation-publish-/create.role)

    ### | `principle`
    A `principle` can create `auth-token`'s to interact with the network according to the `role`s it has been given.

    #### Schema
    ```javascript
      {
        root: "some-uuid"
        roles: [
          "<some-role-root>",
          "<someother-role-root>",
        ]
      }
    ```

    #### Commands
    [create](#operation-publish-/create.principle)

    ### | `auth-token`
    An `auth-token` represents a [JWT](https://jwt.io) used as authentication and authorization for operations on a `principle`'s behalf.

    #### Schema
    ```javascript
      {
        root: "some-uuid",
        token: "<the jwt token>",
      }
    ```

    #### Commands
    [create](#operation-publish-/create.auth-token)

    ### | `challenge`
    A `challenge` represents an instance of federated identity authorization by verifying a code sent to a trusted channel (like a phone number).

    #### Schema
    ```javascript
      {
        root: "some-uuid",
        code: 123456,
        hash: "<some-data-hash>"
      }
    ```

    #### Commands
    [create](#operation-publish-/create.challenge)

    ### | `person-account`
    A `person-account` represents a person with a unique phone number interacting with the network through a **principle**.

    #### Schema
    ```javascript
      {
        root: "some-uuid",
        phone: "+11234567890",
        phoneVerified: true,
        id: "some-chosen-unique-id",
        name: {
          short: "Some",
          full: "Some Full Name"
        },
        principle: "<some principle>"
      }
    ```

    #### Commands
    [create](#operation-publish-/create.person-account)

    ### | `service-account` 
    A `service-account` represents a `service` interacting with the network through a `principle`.

    #### Schema
    ```javascript
      {
        root: "some-uuid",
        id: "some-auto-generated-id",
        domain: "core.sustainers.network",
        secret: 1234567890,
        principle: "<some principle>"
      }
    ```

    #### Commands
    [create](#operation-publish-/create.service-account)

    ### | `service`
    A `service` represents a business on the network.

    #### Schema
    ```javascript
      {
        root: "some-uuid",
        name: "Some Service Name",
        id: "some-chosen-unique-in"
      }
    ```

    #### Commands
    [create](#operation-publish-/create.service)

    ### | `webhook`
    A `webhook` represents an endpoint to publish Events to. For example, a `did-create.service` event will get published as a result of issuing the `create.service` command.

    #### Schema
    ```javascript
      {
        root: "some-uuid",
        name: "Some Name",
        url: "https://some.endpoint.to.send/events/to"
      }
    ```

    #### Commands
    [create](#operation-publish-/create.webhook)

servers:
  prod:
    url: https://core.sustainers.network
    protocol: http
    description: Use this server to interact with the production network and create real transactions.
  sandbox:
    url: https://core.sandbox.sustainers.network
    protocol: http
    description: Use this server to access sandbox data. All transactions will be faked.

defaultContentType: application/json

tags:
  - name: role
  - name: principle
  - name: auth-token
  - name: challenge
  - name: person-account
  - name: service-account
  - name: service
  - name: webhook

channels:
  /create.role:
    publish:
      operationId: create.role.core.sustainers.network
      summary: create
      description: |
        Creates a role.
      tags:
        - name: role
      message:
        $ref: "#/components/messages/domain.role.create.req"
  did-create.role:
    subscribe:
      operationId: did-create.role.core.sustainers.network
      summary: did-create
      description: |
        Published once a role is created.
      tags:
        - name: role
      message:
        $ref: "#/components/messages/domain.role.create.event"

  /create.principle:
    publish:
      operationId: create.principle.core.sustainers.network
      summary: create
      description: |
        Creates a principle.
      tags:
        - name: principle
      message:
        $ref: "#/components/messages/domain.principle.create.req"

  /create.auth-token:
    publish:
      operationId: create.auth-token.core.sustainers.network
      summary: create
      description: |
        This **command** creates an
      tags:
        - name: auth-token
      message:
        $ref: "#/components/messages/domain.auth-token.create.req"

  /create.challenge:
    publish:
      operationId: create.challenge.core.sustainers.network
      summary: create
      description: |
        This **command** creates an
      tags:
        - name: challenge
      message:
        $ref: "#/components/messages/domain.challenge.create.req"

  /create.person-account:
    publish:
      operationId: create.person-account.core.sustainers.network
      summary: create
      description: |
        This **command** creates an
      tags:
        - name: person-account
      message:
        $ref: "#/components/messages/domain.person-account.create.req"

  /create.service-account:
    publish:
      operationId: create.service-account.core.sustainers.network
      summary: create
      description: |
        This **command** creates an
      tags:
        - name: service-account
      message:
        $ref: "#/components/messages/domain.service-account.create.req"

  /create.service:
    publish:
      operationId: create.service.core.sustainers.network
      summary: create
      description: |
        This **command** creates an
      tags:
        - name: service
      message:
        $ref: "#/components/messages/domain.service.create.req"

  /create.webhook:
    publish:
      operationId: create.webhook.core.sustainers.network
      summary: create
      description: |
        This **command** creates an
      tags:
        - name: webhook
      message:
        $ref: "#/components/messages/domain.webhook.create.req"

components:
  messages:
    default.res:
      payload:
        type: object
        properties:
          root:
            type: string

    domain.auth-token.create.req:
      name: /
      title: Create auth token command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.auth-token.create.payload"

    domain.role.create.req:
      name: /
      title: Create role command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.role.create.payload"

    domain.role.create.event:
      name: /
      title: A role was created.
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/domain.role.did-create.payload"

    domain.principle.create.req:
      name: /
      title: Create principle command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.principle.create.payload"

    domain.challenge.create.req:
      name: /
      title: Create challenge command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.challenge.create.payload"

    domain.person-account.create.req:
      name: /
      title: Create person-account command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.person-account.create.payload"

    domain.service-account.create.req:
      name: /
      title: Create service-account command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.service-account.create.payload"

    domain.service.create.req:
      name: /
      title: Create service command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.service.create.payload"

    domain.webhook.create.req:
      name: /
      title: Create webhook command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.webhook.create.payload"

    error.unexpected:
      payload:
        type: object
        properties:
          status:
            type: string
            const: Unexpected error

  operationBindings:
    rest:
      http:
        POST:
          requestBody: "$message#"
          responses:
            "200":
              $ref: "#/components/messages/default.res"
            default:
              code: 500
              message:
                $ref: "#/components/messages/error.unexpected"
        bindingVersion: 0.2.0 # 0.2.0 doesn't exist yet

  schemas:
    component.sent-at:
      type: string
      format: date-time
      description: Date and time when the message was sent.

    domain.auth-token.create.payload:
      type: object

    domain.role.create.payload:
      type: object
      properties:
        name:
          type: string
          description: The name of the new role.
        scopes:
          type: array
          description: The scopes to associate with the new role.
          items:
            type: object
            properties:
              domain:
                type: string
              permissions:
                type: array
                items:
                  type: string
              root:
                type: string
      required:
        - name
        - scopes

    domain.role.did-create.payload:
      $ref: "#/components/schemas/domain.role.create.payload"

    domain.principle.create.payload:
      type: object
      properties:
        roles:
          type: array
          description: The roles this principle can play.
          items:
            type: string

    domain.challenge.create.payload:
      type: object
      properties:
        phone:
          type: string
          description: The phone number to send the challenge code to.
        hash:
          type: string
          description: A hash that must also be provided with the `verify` command in order to verify successfully.
      required:
        - phone

    domain.person-account.create.payload:
      type: object
      properties:
        phone:
          type: string
          description: |
            The phone number to associate with the account. 
            If a phone number is supplied, `create.challenge` will be issued in the background with the provided phone number.
        name:
          type: object
          properties:
            short:
              type: string
              description: The name the person want's to be referred to.
            full:
              type: string
              description: The person's full name.
        roles:
          type: array
          description: The roles this account's `principle` can play.
          items:
            type: string

    domain.service-account.create.payload:
      type: object
      properties:
        roles:
          type: array
          description: The roles this account's `principle` can play.
          items:
            type: string

    domain.service.create.payload:
      type: object
      properties:
        name:
          type: string
          description: The name of the service.

    domain.webhook.create.payload:
      type: object
      properties:
        url:
          type: string
          description: The url to send events to.

  securitySchemes:
    apiKey:
      type: apiKey
      in: user
      description: Your apiKey is your service's account id.

  messageTraits:
    command-headers:
      headers:
        type: object
        properties:
          issuedDate:
            type: string
            format: date-time
            description: The time the command was issued.
          trace:
            type: string
            description: "A value passed from the original command issuer to relate subsequent events."
          sourceCommand:
            type: object
            description: If this command was issued by another command, the issuer's info should be described here.
            properties:
              id:
                type: string
                description: The issuing command's id.
              action:
                type: string
                description: The issuing command's action.
              domain:
                type: string
                description: The issuing command's domain.
              service:
                type: string
                description: The issuing command's service.
        required:
          - issuedDate
