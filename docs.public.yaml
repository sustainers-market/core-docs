asyncapi: 2.0.0-rc2

info:
  title: Core | Sustainer's Market Network
  version: "1.0.0"
  description: |
    The Core service provides identity, transaction, and accounting functionality for the [Sustainer's Market](https://sustainers.market).

    The service is composed of the following domains:

    # `role`

    A `role` is a grouping of scopes.

    #### Schema

    ```javascript
      {
        root: "some-uuid"
        scopes: [
          { 
            domain: "service", 
            priviledges: ["create"]
          },
          { 
            domain: "challenge", 
            priviledge: "verify",
            roots: "[some-challenge-root]"
          },
        ]
      }
    ```

    The example above has access to services that allow the `service:create` or `challenge:verify` scopes. 

    # `principle`

    A `principle` can create `auth-token`'s to interact with the network according to the roles it has been given.

    #### Schema

    ```javascript
      {
        root: "some-uuid"
        roles: [
          "<some-role-root>",
          "<someother-role-root>",
        ]
      }
    ```
    This `principle` in this example can access services that allow 
    the `service:create`, `service:edit`, and the `challenge:verify:[some-uuid]` scopes.

    #### Actions 
    create, edit

    # **auth-token**

    An **auth-token** represents a [JWT](https://jwt.io) used as authentication and authorization for operations on a **principle**'s behalf.

    # **challenge**

    A **challenge** represents an instance of federated identity authorization by verifying a code sent to a trusted channel (like a phone number).

    # **person-account** 

    A **person-account** represents a person with a unique phone number interacting with the network through a **principle**.

    # **service-account** 

    A **service-account** represents a service with a unique id interacting with the network through a **principle**.

    # **service** 

    A **service** represents a .

servers:
  prod:
    url: core.sustainers.network
    protocol: http
  sandbox:
    url: core.sandbox.sustainers.network
    protocol: http

defaultContentType: application/json

tags:
  - name: principle
  - name: auth-token
  - name: person-account
  - name: sevice-account
  - name: service
  - name: challenge

channels:
  /create.auth-token:
    publish:
      operationId: create.auth-token.core.sustainers.network
      summary: create
      description: |
        This **command** creates an
        # auth token.
      tags:
        - name: auth-token
      message:
        $ref: "#/components/messages/domain.auth-token.create.req"

components:
  messages:
    default.res:
      payload:
        type: object
        properties:
          root:
            type: string

    domain.auth-token.create.req:
      name: /
      title: Create auth token command
      summary: Do something quite good.
      description: Seriously, real good.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/command-headers"
      payload:
        $ref: "#/components/schemas/domain.auth-token.create.payload"

    error.unexpected:
      payload:
        type: object
        properties:
          status:
            type: string
            const: Unexpected error

  operationBindings:
    rest:
      http:
        POST:
          requestBody: "$message#"
          responses:
            "200":
              $ref: "#/components/messages/default.res"
            default:
              code: 500
              message:
                $ref: "#/components/messages/error.unexpected"
        bindingVersion: 0.2.0 # 0.2.0 doesn't exist yet

  schemas:
    component.sent-at:
      type: string
      format: date-time
      description: Date and time when the message was sent.

    domain.auth-token.create.payload:
      type: object
      properties:
        percentage:
          type: integer
          description: Percentage to which the light should be dimmed to.
          minimum: 0
          maximum: 100

        swag:
          type: object
          description: Light intensity measured in lumens.
          properties:
            umph:
              type: integer
        lumens:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          $ref: "#/components/schemas/component.sent-at"
        some:
          type: string
          enum:
            - on
            - off
      required:
        - percentage

  securitySchemes:
    apiKey:
      type: apiKey
      in: user
      description: Your apiKey is your service's account id.

  messageTraits:
    command-headers:
      headers:
        type: object
        properties:
          trace:
            type: string
            description: "A value passed from the original command issuer to relate subsequent events."
        required:
          - trace
